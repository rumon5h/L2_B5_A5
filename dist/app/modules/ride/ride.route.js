"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RideRoutes = void 0;
const express_1 = require("express");
const validateRequest_1 = require("../../middlewares/validateRequest");
const ride_validation_1 = require("./ride.validation");
const ride_controller_1 = require("./ride.controller");
const checkAuth_1 = require("../../middlewares/checkAuth");
const user_interface_1 = require("../user/user.interface");
const router = (0, express_1.Router)();
router.post("/request", (0, checkAuth_1.checkAuth)(...Object.values(user_interface_1.Role)), (0, validateRequest_1.validateRequest)(ride_validation_1.createRideZodSchema), ride_controller_1.rideController.createRide);
router.get("/rides-near", (0, checkAuth_1.checkAuth)(user_interface_1.Role.DRIVER), ride_controller_1.rideController.getRidesNearMe);
router.get("/all-rides-admin", (0, checkAuth_1.checkAuth)(user_interface_1.Role.ADMIN), ride_controller_1.rideController.getAllRidesForAdmin);
router.get("/all-rides-rider", (0, checkAuth_1.checkAuth)(...Object.values(user_interface_1.Role)), ride_controller_1.rideController.getAllRidesForRider);
router.get("/all-rides-driver", (0, checkAuth_1.checkAuth)(user_interface_1.Role.DRIVER), ride_controller_1.rideController.getAllRidesForDriver);
router.get("/drivers-near", (0, checkAuth_1.checkAuth)(...Object.values(user_interface_1.Role)), ride_controller_1.rideController.getDriversNearMe);
router.get("/my-ride/:id", (0, checkAuth_1.checkAuth)(...Object.values(user_interface_1.Role)), ride_controller_1.rideController.getSingleRideForRider);
router.patch("/cancel-ride/:id", (0, checkAuth_1.checkAuth)(...Object.values(user_interface_1.Role)), ride_controller_1.rideController.cancelRideByRider);
router.patch("/reject-ride/:id", (0, checkAuth_1.checkAuth)(user_interface_1.Role.DRIVER), ride_controller_1.rideController.rejectRide);
router.patch("/accept-ride/:id", (0, checkAuth_1.checkAuth)(user_interface_1.Role.DRIVER), ride_controller_1.rideController.acceptRide);
router.patch("/pickup-rider/:id", (0, checkAuth_1.checkAuth)(user_interface_1.Role.DRIVER), ride_controller_1.rideController.pickupRider);
router.patch("/start-ride/:id", (0, checkAuth_1.checkAuth)(user_interface_1.Role.DRIVER), ride_controller_1.rideController.startRide);
router.patch("/complete-ride/:id", (0, checkAuth_1.checkAuth)(user_interface_1.Role.DRIVER), ride_controller_1.rideController.completeRide);
router.post("/feedback/:rideId", (0, checkAuth_1.checkAuth)(...Object.values(user_interface_1.Role)), (0, validateRequest_1.validateRequest)(ride_validation_1.rideFeedbackSchema), ride_controller_1.rideController.giveFeedback);
exports.RideRoutes = router;
